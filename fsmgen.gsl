.output "fsm_$(abbr).h"
/* $(fsm.name:) ($(ABBR)) State Machine. */

#ifndef FSM_$(ABBR)_H
#define FSM_$(ABBR)_H

#include "fsm.h"

typedef enum {
    $(ABBR)_STATE_NULL,
.for fsm->states
    $(ABBR)_STATE_$(NAME),
.endfor
    $(ABBR)_NUMOF_STATES
} fsm_$(abbr)_state_t;

typedef enum {
    $(ABBR)_EVENT_NULL,
.for fsm->events
    $(ABBR)_EVENT_$(NAME),
.endfor
    $(ABBR)_NUMOF_EVENTS
} fsm_$(abbr)_event_t;

fsm_t fsm_$(abbr)_new(void);

#endif // FSM_$(ABBR)_H
.close
.output "fsm_$(abbr).c"
/* $(fsm.name:) ($(ABBR)) State Machine. */

#include "fsm_$(abbr).h"
#include "fsm_$(abbr)_actions.h"

/* Transitions
 * -------------------------------------------------------------------------- */
static fsm_state_t
$(abbr)_tx_table [$(ABBR)_NUMOF_STATES] = {
.for states
.    for state
    [$(ABBR)_STATE_$(NAME)] = {
        .id = $(ABBR)_STATE_$(NAME),
        .transitions = {
.       for transition
            [$(ABBR)_EVENT_$(EVENT)] = $(ABBR)_STATE_$(NEW_STATE),
.       endfor
        },
        .on_entry = $(abbr)_$(name)_on_entry,
        .on_exit  = $(abbr)_$(name)_on_exit,
        .on_tick  = $(abbr)_$(name)_on_tick,
    },
.    endfor
.endfor
};

/* Public functions
 * -------------------------------------------------------------------------- */
fsm_t fsm_$(abbr)_new(void)
{
.   first_state_id = "$(abbr)_state_$(fsm.first_state)"
    return fsm_new($(abbr)_tx_table, &$(abbr)_tx_table[$(FIRST_STATE_ID)]);
}

.close
.output "fsm_$(abbr)_actions.h"
#ifndef FSM_$(ABBR)_ACTIONS_H
#define FSM_$(ABBR)_ACTIONS_H

.for fsm->states
void $(abbr)_$(name)_on_entry(void);
void $(abbr)_$(name)_on_exit(void);
void $(abbr)_$(name)_on_tick(void);
.endfor

#endif // FSM_$(ABBR)_ACTIONS_H
.close
.output "fsm_$(abbr)_actions_skel.c"
#include "fsm_$(abbr)_actions.h"

.for fsm->states
void $(abbr)_$(name)_on_entry(void)
{
}

void $(abbr)_$(name)_on_exit(void)
{
}

void $(abbr)_$(name)_on_tick(void)
{
}

.endfor

.close
